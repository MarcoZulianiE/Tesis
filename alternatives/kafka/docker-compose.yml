version: "3.8"

networks:
  store_net:
    driver: bridge
  transportation_net:
    driver: bridge
  messaging_net:
    driver: bridge
  kafka_net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - kafka_net

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka_net
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  store_api:
    build: ../../api/store
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=store_db
      - DB_PORT=5432
      - DB_NAME=store
    ports:
      - "3000:3000"
    networks:
      - store_net
    depends_on:
      store_db:
        condition: service_healthy

  store_db:
    image: "postgres:13"
    environment:
      - POSTGRES_DB=store
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - store_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  transportation_api:
    build: ../../api/transportation
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=transportation_db
      - DB_PORT=5432
      - DB_NAME=transportation
    ports:
      - "3001:3001"
    networks:
      - transportation_net
    depends_on:
      transportation_db:
        condition: service_healthy

  transportation_db:
    image: "postgres:13"
    environment:
      - POSTGRES_DB=transportation
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    networks:
      - transportation_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  messaging_api:
    build: ../../api/messaging
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=messaging_db
      - DB_PORT=5432
      - DB_NAME=messaging
    ports:
      - "3002:3002"
    networks:
      - messaging_net
    depends_on:
      messaging_db:
        condition: service_healthy

  messaging_db:
    image: "postgres:13"
    environment:
      - POSTGRES_DB=messaging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    networks:
      - messaging_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  store_server:
    build: ./store
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
      - STORE_API=http://store_api:3000
    ports:
      - "4000:4000"
    networks:
      - store_net
      - kafka_net
    depends_on:
      kafka:
        condition: service_healthy

  transportation_server:
    build: ./transportation
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
      - TRANSPORTATION_API=http://transportation_api:3001
    ports:
      - "4001:4000"
    networks:
      - transportation_net
      - kafka_net
    depends_on:
      kafka:
        condition: service_healthy

  messaging_server:
    build: ./messaging
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=19092
      - MESSAGING_API=http://messaging_api:3002
    ports:
      - "4002:4000"
    networks:
      - messaging_net
      - kafka_net
    depends_on:
      kafka:
        condition: service_healthy
